{"version":3,"file":"static/js/482.84937fd3.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.js","components/ContactInput/ContactInput.js","components/ContactList/ContactList.js","components/Filter/Filter.js","../node_modules/nanoid/index.browser.js","pages/PhoneBook/PhoneBook.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { addContacts} from \"../../redux/contacts/contactsOperations\";\r\n\r\nexport const ContactForm = () => {\r\n  const [name, setName] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const dispatch = useDispatch();\r\n  const contacts = useSelector((state) => state.contacts.items);\r\n\r\n  const handleChange = (e) => {\r\n    const { name, value } = e.target;\r\n    if (name === \"name\") {\r\n      setName(value);\r\n    } else if (name === \"phone\") {\r\n      setPhone(value);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if (\r\n      contacts.find((item) => item.name.toLowerCase() === name.toLowerCase())\r\n    ) {\r\n     return alert(`Contact ${name} is already exist`);\r\n    } else {\r\n    dispatch(addContacts({name, number: phone}));\r\n    }\r\n    return reset;\r\n  };\r\n\r\n  const reset = () => {\r\n    setName({ name: \"\" });\r\n    setPhone({ phone: \"\" });\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={handleSubmit}>\r\n      <Label >\r\n        Name\r\n        <Input\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n          required\r\n          value={name}\r\n          onChange={handleChange}\r\n        />\r\n      </Label>\r\n      <br />\r\n      <Label >\r\n        Number\r\n        <Input\r\n          type=\"tel\"\r\n          name=\"phone\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n          required\r\n          value={phone}\r\n          onChange={handleChange}\r\n        />\r\n      </Label>\r\n      <Button type=\"submit\">Add contact</Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nconst Form = styled.form`\r\nborder: 1px solid black;\r\n  border-radius: 6px;\r\n  display: flex;\r\n  width: 300px;\r\n  flex-direction: column;\r\n  align-items: center;\r\n`;\r\n\r\nconst Label = styled.section`\r\npadding-top: 20px;\r\n  font-weight: 500;\r\n  font-size: 18px;\r\n  line-height: 1.14;\r\n  font-style: normal;\r\n  margin-left: 10px;\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 0.5em;\r\n  &:hover,\r\n  &:focus {\r\n    border: 3px solid rgb(32, 122, 174, 0.56);\r\n    box-shadow: 1px 4px 6px 0px rgba(0, 0, 0, 0.16),\r\n      0px 4px 4px 0px rgba(0, 0, 0, 0.06), 0px 1px 1px 0px rgba(0, 0, 0, 0.12);\r\n  }\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin-top: 15px;\r\n  margin-left: 10px;\r\n  margin-bottom: 10px;\r\n  border: 1px solid black;\r\n  border-radius: 4px;\r\n  background-color: white;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    border: 1px solid transparent;\r\n    background-color: rgb(55, 1, 249);\r\n    color: white;\r\n  }\r\n`;\r\n\r\nexport default ContactForm;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styled from \"styled-components\";\r\n\r\nconst ContactInput = ({ name, number }) => {\r\n  return (\r\n    <Wrapper>\r\n      <Title>{name}:</Title>\r\n      <Number>{number}:</Number>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.section`\r\n  display: flex;\r\n  justify-content: flex-start;\r\n  align-items: baseline;\r\n`;\r\n\r\nconst Title = styled.li`\r\n  font-weight: 500;\r\n  font-size: 20px;\r\n  line-height: 1.14;\r\n  font-style: normal;\r\n`;\r\n\r\nconst Number = styled.h1`\r\n  margin-left: 15px;\r\n  font-weight: 500;\r\n  font-size: 18px;\r\n  line-height: 1.14;\r\n  font-style: normal;s\r\n`;\r\n\r\nContactInput.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default ContactInput;\r\n","import styled from \"styled-components\";\r\nimport ContactInput from \"../ContactInput/ContactInput\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { removeContacts } from \"../../redux/contacts/contactsOperations\";\r\nimport { useEffect } from \"react\";\r\nimport { getContacts } from \"../../redux/contacts/contactsOperations\";\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector((state) => state.contacts.items);\r\n  const filter = useSelector((state) => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n\r\n  const visibleContacts = contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase())\r\n  );\r\n\r\n  useEffect(() => {\r\n    dispatch(getContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <List>\r\n      {visibleContacts.map(({ id, name, phone }) => (\r\n        <Li key={id}>\r\n          <ContactInput \r\n            name={name} \r\n            number={phone} \r\n          />\r\n          <Button \r\n            type=\"button\" \r\n            onClick={() => dispatch(removeContacts())}>\r\n            Delete\r\n          </Button>\r\n        </Li>\r\n      ))}\r\n    </List>\r\n  );\r\n};\r\nconst List = styled.ul`\r\n  margin-left: 15px;\r\n`;\r\n\r\nconst Li = styled.li`\r\n  display: flex;\r\n  align-items: center;\r\n  list-style: circle;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  margin-left: 15px;\r\n  background-color: white;\r\n  border-radius: 4px;\r\n  border: 1px solid black;\r\n  transition: 250ms cubic-bezier(0.4, 0, 0.2, 1);\r\n\r\n  &:hover,\r\n  &:focus {\r\n    color: white;\r\n    border: 4px solid transparent;\r\n    background-color: rgb(32, 122, 174, 0.56);\r\n    box-shadow: 1px 4px 6px 0px rgba(0, 0, 0, 0.16),\r\n      0px 4px 4px 0px rgba(0, 0, 0, 0.06), 0px 1px 1px 0px rgba(0, 0, 0, 0.12);\r\n  }\r\n`;\r\n\r\nexport default ContactList;\r\n","import { nanoid } from \"nanoid\";\r\nimport React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { filterItems } from \"../../redux/contacts/contactsSlice\";\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  const filterId = nanoid();\r\n  const filter = useSelector((state) => state.contacts.filter);\r\n  const dispatch = useDispatch();\r\n\r\n  return (\r\n    <Label htmlFor={filterId}>\r\n      Find contacts by name\r\n      <Input \r\n      id={filterId} \r\n      type=\"text\" \r\n      value={filter} \r\n      onChange={e => dispatch(filterItems(e.target.value))} />\r\n    </Label>\r\n  );\r\n};\r\n\r\nconst Label = styled.section`\r\n  font-weight: 500;\r\n  font-size: 18px;\r\n  line-height: 1.14;\r\n  font-style: normal;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 0.5em;\r\n\r\n  &:hover,\r\n  &:focus {\r\n    border: 3px solid rgb(32, 122, 174, 0.56);\r\n    box-shadow: 1px 4px 6px 0px rgba(0, 0, 0, 0.16),\r\n      0px 4px 4px 0px rgba(0, 0, 0, 0.06), 0px 1px 1px 0px rgba(0, 0, 0, 0.12);\r\n  }\r\n`;\r\nexport default Filter;\r\n","import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","import ContactForm from \"../../components/ContactForm/ContactForm\";\r\nimport ContactList from \"../../components/ContactList/ContactList\";\r\nimport Filter from \"../../components/Filter/Filter\";\r\nimport styled from \"styled-components\";\r\n\r\nexport default function PhoneBook () {\r\n  \r\n  return (\r\n    <Wrapper>\r\n      <h1> Phonebook </h1>\r\n      <ContactForm />\r\n\r\n      <h2>Contacts</h2>\r\n      <Filter />\r\n      <ContactList />\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst Wrapper = styled.main`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  margin-left: 15px;\r\n  width: 100%;\r\n`;\r\n"],"names":["Form","styled","Label","Input","Button","useState","name","setName","phone","setPhone","dispatch","useDispatch","contacts","useSelector","state","items","handleChange","e","target","value","reset","onSubmit","preventDefault","find","item","toLowerCase","alert","addContacts","number","type","pattern","title","required","onChange","Wrapper","Title","Number","List","Li","filter","visibleContacts","contact","includes","useEffect","getContacts","map","id","onClick","removeContacts","filterId","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid","htmlFor","filterItems","PhoneBook"],"sourceRoot":""}